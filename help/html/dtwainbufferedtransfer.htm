<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>DTwainBufferedTransfer</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?dtwainbufferedtransfer.htm"; }
  else { parent.quicksync('a9.14.11'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">DTwainBufferedTransfer</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="dtwaincompressedtransfersetj_2.htm">Previous</a>&nbsp;
     <a href="dtwainbufferedtransferdtwain_2.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="color: #ff0000;">Note: &nbsp;You must be familiar with the buffered image transfer mode before reading this section. &nbsp;Buffered transfers are discussed fully in the main help manual.</span></p>
<p>&nbsp;</p>
<p>The DTwainBufferedTransfer class is derived from <span style="font-weight: bold;">DTwainCompressedTransfer</span>. Therefore <span style="font-weight: bold;">public</span> functions available to DTwainCompressedTransfer are available to DTwainBufferedTransfer.</p>
<p>&nbsp;</p>
<p>A buffered image transfer is one where the image that is acquired from the Twain device is done in multiple passes. &nbsp;Each pass produces a "strip" of image data, where the size of the strip to acquire can be set programatically. &nbsp;The advantages of acquiring images using the buffered transfer are too numerous to mention in this manual, however, these details are covered in the main DTWAIN help manual DTWAIN32.HLP.</p>
<p>&nbsp;</p>
<p>There are two ways to start a buffered image transfer using the DTWAIN C++ classes. &nbsp;The easiest way is to call the DTwainAcquirer::SetAcquireType( ) using the TWAIN_ACQUIREBUFFERED flag, and then calling DTwainAcquirer::Acquire( ) to start the acquisition:</p>
<p>&nbsp;</p>
<p>#include "cdtwain.h"</p>
<p>#include &lt;iostream&gt;</p>
<p>&nbsp;</p>
<p>using namespace DTWAIN;</p>
<p>using namespace std;</p>
<p>&nbsp;</p>
<p>int main( )</p>
<p>{</p>
<p> &nbsp; // Initialize DTWAIN - return if initialization does not work</p>
<p> &nbsp; DTwainInterface TI;</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare a Source and assign the default TWAIN source to it</p>
<p> &nbsp; DTwainSource Source = DTwainSource::Select( );</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare an acquisition object, and attach the source to it</p>
<p> &nbsp; DTwainAcquirer Acq(Source);</p>
<p> &nbsp; </p>
<p> &nbsp; // Set the acquire type to Native</p>
<p> &nbsp; Acq.SetAcquireType(TWAIN_ACQUIREBUFFERED);</p>
<p>&nbsp;</p>
<p> &nbsp; // Start the acquisition</p>
<p> &nbsp; Acq.Acquire( );</p>
<p>  </p>
<p> &nbsp;// handle acquired dibs...</p>
<p> &nbsp;//...</p>
<p>}</p>
<p>&nbsp;</p>
<p>The example program above starts an image acquisition using the buffered image transfer. &nbsp;The size of the strips used when acquiring the data from the device is always the preferred size.  </p>
<p>&nbsp;</p>
<p>However, one unique aspect of buffered image transfers (as opposed to native transfers) is that </p>
<p>&nbsp;</p>
<p>1) You can specify the size of the strips of data when acquiring the image</p>
<p>2) You can specify a certain compression type to use for the acquired data (if the Twain Source has support for compressed data).</p>
<p>&nbsp;</p>
<p>The method described above does not allow you to specify the strip size or compression type. &nbsp;To do this, a specialized form of the DTwainAcquirer::Acquire function is required to fit this purpose. &nbsp;This specialized version has as a parameter a <span style="font-weight: bold;">DTwainBufferedTransfer</span> object that has all of this information. &nbsp;In addition, a special <a href="dtwainlistener.htm">listener</a> object called a <span style="font-weight: bold;">DTwainBufferedListener</span> that collects the data while the image is being acquired needs to be created.</p>
<p>&nbsp;</p>
<p>The following code illustrates this:</p>
<p>&nbsp;</p>
<p>#include "cdtwain.h" &nbsp;// CDTwain</p>
<p>&nbsp;</p>
<p>using namespace DTWAIN;</p>
<p>using namespace std; // for &lt;iostream&gt; </p>
<p>&nbsp;</p>
<p>int main( )</p>
<p>{</p>
<p> &nbsp; // Initialize DTWAIN - return if initialization does not work</p>
<p> &nbsp; DTwainInterface TI;</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare a Source and assign the default TWAIN source to it</p>
<p> &nbsp; DTwainSource Source = DTwainSource::Select( );</p>
<p>&nbsp;</p>
<p> &nbsp; // Create an acquire object, attach the source</p>
<p> &nbsp; DTwainAcquirer Acq( Source );</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the acquire type to buffered mode</p>
<p> &nbsp; Acq.SetAcquireType( TWAIN_ACQUIREBUFFERED );</p>
<p>&nbsp;</p>
<p> &nbsp; // Create a buffered transfer helper object, and attach Source to the object, </p>
<p> &nbsp; <span style="font-weight: bold;">DTwainBufferedTransfer</span> BT(Source);</p>
<p>&nbsp;</p>
<p> &nbsp; // Now set the strip size. &nbsp;Preferred strip size is illustrated here.</p>
<p> &nbsp; BT.SetStripSize( BT.GetPreferredStripSize( ) );</p>
<p>&nbsp;</p>
<p> &nbsp; // Attach to a special buffered transfer listener that writes images to files and increments the</p>
<p> &nbsp; // file name to the "next" file.</p>
<p> &nbsp; std::string fName = "FILE000";</p>
<p> &nbsp; DTwainBufferedListener Listener( fName, &amp;BT );</p>
<p> &nbsp; Acq.AddListener( &amp;Listener );</p>
<p>&nbsp;</p>
<p> &nbsp; // Start the acquisition</p>
<p> &nbsp; Acq.Acquire( BT );<span style="font-size: 12pt;"> &nbsp;  </span></p>
<p>} // If acquisition completed, raw data files FILE000, FILE001, FILE002, etc. should be available  </p>
<p>&nbsp;</p>
<p>If we look at the above example in depth, basically everything is the same as the first example until we get to the line that declares a DTwainBufferedTransfer object called <span style="font-style: italic;">BT</span>. &nbsp;Note that the parameter used to construct this object is the DTwainSource <span style="font-style: italic;">Source</span>. &nbsp;The next line sets the strip size to the preferred size by calling the member function SetStripSize. &nbsp;By default, the preferred size is always used, however the call to SetStripSize is used here for illustrative purposes.</p>
<p>&nbsp;</p>
<p>Then the listener object <span style="font-weight: bold;">DTwainBufferedListener</span> is created with the name of the file to save the buffered data (however, you do not need to save the acquired data to the file), and a pointer to the DTwainBufferedTransfer object defined earlier. &nbsp;This listener is then added to the DTwainAcquirer object using the AddListener function. &nbsp;The last step is to call the DTwainAcquirer::Acquire function using the DTwainBufferedTransfer object as the parameter.  </p>
<p>&nbsp;</p>
<p>What does this all do? &nbsp;This does the following:</p>
<p>&nbsp;</p>
<p>Acquires buffered data and saves it to the file named FILE000. &nbsp;If there are more pages to acquire, the file name is incremented by 1. For example, FILE000 will be the name of the first file, FILE001 is the second page, FILE002 is the third page, etc.</p>
<p>&nbsp;</p>
<p>Note that this is <span style="font-weight: bold;">not</span> the same as the DTWAIN file acquisition mode. &nbsp;This is still a buffered memory transfer, but using the magic of the DTwainBufferedTransfer and the DTwainBufferedListener, files are created that store the data acquired.</p>
<p>&nbsp;</p>
<p>The DTwainBufferedTransfer object contains functions that set the strip size, set the compression type, check if a compression type is supported, etc. &nbsp;The DTwainBufferedListener object handles the saving of the data to a buffer, and then at the end of the acquisition, saves the data to a file.  </p>
<p>&nbsp;</p>
<p>Now what if you don't want to save the data to a file? &nbsp;For example, what if you want to take the saved strips and create your own file, or do something with the image data that has nothing to do with file saving? &nbsp;All that is possible by just deriving from DTwainBufferedTwainListener and overriding the following functions:</p>
<p>&nbsp;</p>
<p>DTwainBufferedTransfer::OnEndProcessingStrips( )</p>
<p>&nbsp;</p>
<p>This function is responsible for saving the acquired data to a file. &nbsp;By overiding this function, you can stop the saving to a file and handle the data any way your application sees fit. &nbsp;The acquired data is retrieved by calling the DTwainBufferedListener::GetData( ) or DTwainBufferedListener::GetDataBuffer( ) functions.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
