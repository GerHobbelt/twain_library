<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Version 2.0 Overview</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?version2_0overview_2.htm"; }
  else { parent.quicksync('a9.2'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Version 2.0 Overview</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="initialsetup_2.htm">Previous</a>&nbsp;
     <a href="visual_c_and_precompiled_heade.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>Version 2.0 uses the following C++ coding paradigms:</p>
<p>&nbsp;</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td><span style="font-weight: bold;">Namespaces </span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td><span style="font-weight: bold;">ANSI Standard C++ classes such as std::string and std::vector (Standard Template Library, a.k.a STL)</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td><span style="font-weight: bold;">Templates</span></td></tr></table></div><p>&nbsp;</p>
<p>Therefore a compiler that supports these C++ features could be used for Version 2.0 of the DTWAIN C++ classes. &nbsp;It is best that the compiler supports all of the above, however namespace support is optional (as discussed in the <a href="initialsetup_2.htm">initial setup</a>). &nbsp;However what is <span style="font-weight: bold;">not</span> optional is that your compiler <span style="font-weight: bold;">must</span> support the std::string and std::vector classes, and templates. &nbsp;Usually any compiler with modest support for templates and STL will compile the DTWAIN C++ classes with no problems.</p>
<p>&nbsp;</p>
<p>Tested compilers have been:</p>
<p>&nbsp;</p>
<p>Visual C++ 6.0, 7.x, 8.0 (Visual Studio 2005)</p>
<p>Borland C++ Builder 5.0, 6.0</p>
<p>Metrowerks CodeWarrior 7.0, 8.0</p>
<p>g++ version 3.x, 4.x (Bloodshed Dev-C++, MingW, etc.)</p>
<p>Digital Mars 8.3x (Must use STLPort 4.5.3)</p>
<p>&nbsp;</p>
<p>Compilers that should work (since namespaces, STL, and templates are supported) but have not been tested are: </p>
<p>&nbsp;</p>
<p>IBM VisualAge 8.0 </p>
<p>Intel C++ compiler</p>
<p>Comeau C++</p>
<p>&nbsp;</p>
<p>To use the classes successfully, you must have knowledge of usage of the standard C++ string class (std::string), and some usage of the STL std::vector class. &nbsp; Usage of these classes eliminate (or greatly reduce) the reliance on the usage of pointers and dynamically allocated memory to communicate with the DTWAIN classes. &nbsp;Memory allocation and cleanup is automatically done by these classes, which greatly reduces the chance of any memory-related bugs. </p>
<p>&nbsp;</p>
<p>If you are not familiar with std::vector or std::string, a look at the example programs in the <a href="cexamples.htm">Examples</a> section of this manual, along with references in almost any C++ book or tutorial.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold; text-decoration: underline;">Usage of std::string to store image data</span></p>
<p>&nbsp;</p>
<p>The DTWAIN C++ classes use the std::string to store the acquired image data whenever an "advanced memory buffer transfer" is invoked (see <a href="example7acquireusingcompr_2.htm">Example 7</a>). &nbsp;The std::string class, despite its name, is fully capable of storing binary data, including data that has embedded null bytes. &nbsp;To retrieve the image data from a std::string type, you should use the std::string::data( ) or std::string::c_str( ) function. &nbsp;To retrieve the length of the image data, use std::string::size( ) or std::string::length( ).  </p>
<p>&nbsp;</p>
<p>Note that since the data is binary data, and null bytes may be present in the image data, you cannot use the traditional 'C' functions such as strcpy( ) to manipulate the image data, since these functions only work for null-terminated strings. &nbsp;If you are not familiar with std::string, it is the standard C++ string class, and all the compilers mentioned above support this type. </p>
<p>&nbsp;</p>
<p>The DTwainStringArray, DTwainDoubleArray, DTwainLongArray, and DTwainFrameArray are STL vector classes, therefore they are fully compatible with the std::vector interface (for example, std::sort( ), std::find( ), push_back( ), size( ), resize( ), etc. can be used on these types).</p>
<p>&nbsp;</p>
<p>Version 2.0 of the C++ interface is also fully compatible with usage of the <a href="usingdtwainwithoutanimport.htm">DYDTWAIN</a> code. &nbsp;The DYDTWAIN code allows programmers to use run-time linkage to the DTWAIN DLL using LoadLibrary( ) instead of linking to DTWAIN32.LIB. &nbsp;Also, the library is fully compatible with the DTWAIN static libraries. &nbsp;The DYDTWAIN code can be found in the DYDTWAIN directory of your DTWAIN installation.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold; text-decoration: underline;">Function call chaining</span>:</p>
<p>Note that many of the classes in the DTWAIN C++ interface have member functions that return a reference to the current object. &nbsp;This allows an application to optionally use <span style="font-weight: bold;">function chaining</span> to initialize and set various attributes of the object. &nbsp;Function chaining allows you to specify various options using the member functions of the object, where all the functions are "chained" together using the C++ '.' operator.  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>Below is an example using the DTwainAcquirer object:</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-size: 9pt;">DTwainSource Source;</span></p>
<p><span style="font-size: 9pt;">// Assume Source has been initialized correctly</span></p>
<p><span style="font-size: 9pt;">//..</span></p>
<p><span style="font-size: 9pt;">DTwainAcquirer Acq( Source ).</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SetUIMode( false ).</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SetColorType( COLORTYPE_BW ).</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SetMaxPages( DTWAIN_ACQUIREALL ).</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SetMultiPageFileMode(true).</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Acquire( "TEST.TIF", FILETYPE_TIFFG3 );</span></p>
<p>&nbsp;</p>
<p>The code above does the following:</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Creates a DTwainAcquirer object called Acq using the Source as the argument to the constructor</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Sets the UI mode to false (this disables the user interface when acquiring an image), </td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Sets the pixel type to black/white, </td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Sets the number of pages to acquire to "ALL PAGES"</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Informs that the file saved will be a multi-page image file</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>starts the acquisition process and acquires to a TIFF Group 3 file called "TEST.TIF".</td></tr></table></div><p>&nbsp;</p>
<p>Note that the Acquire( ) function is last in the function chain. &nbsp;This indicates that the last process that will occur is the call to Acquire( ), effectively starting the acquisition process.</p>
<p>&nbsp;</p>
<p>Function chaining is completely optional. &nbsp;You can achieve the same results using the traditional C++ method of calling the functions individually:</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">DTwainAcquirer Acq( Source );</span></p>
<p><span style="font-size: 9pt;">Acq.SetUIMode( false );</span></p>
<p><span style="font-size: 9pt;">Acq.SetColorType( COLORTYPE_BW );</span></p>
<p><span style="font-size: 9pt;">Acq.SetMaxPages( DTWAIN_ACQUIREALL );</span></p>
<p><span style="font-size: 9pt;">Acq.SetMultiPageFileMode(true);</span></p>
<p><span style="font-size: 9pt;">Acq.Acquire( "TEST.TIF", FILETYPE_TIFFG3 );</span></p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
