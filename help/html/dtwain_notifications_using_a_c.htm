<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>DTWAIN Notifications Using a Callback Function</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="DTWAIN Notifications Using a Callback Function" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?dtwain_notifications_using_a_c.htm"; }
  else { parent.quicksync('a3.1.20.1'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">DTWAIN Notifications Using a Callback Function</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="processing_acquisition_message.htm">Previous</a>&nbsp;
     <a href="dtwain_notifications_using_a_w.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>To retrieve DTWAIN notifcations using a user-defined callback function, the <a href="dtwain_setcallback.htm">DTWAIN_SetCallback</a> or <a href="dtwain_setcallback64.htm">DTWAIN_SetCallback64</a> function must be called.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #ff6600;">This section discusses mostly the use of DTWAIN_SetCallback. &nbsp;The DTWAIN_SetCallback64 function works exactly the same way as DTWAIN_SetCallback, except that the user-defined data for DTWAIN_SetCallback64 is a 64-bit integer, as opposed to a 32-bit integer.</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<hr noshade size=1 style="color : #000000"><p><span style="color: #000000;">&nbsp;</span></p>
<p>Once your callback function has been called by DTWAIN, you will need to know exactly what DTWAIN is informing your application of. &nbsp;To get the notification, the notification code is always passed as the '<span style="font-weight: bold;">WPARAM</span>' value of the DTWAIN message. &nbsp;The current Source is always sent as the <span style="font-weight: bold;">LPARAM</span> value.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The advantage of using callback functions over a <a href="dtwain_notifications_using_a_w.htm">window procedure</a> to route the notifications is that an application may not even have a window, but would still desire to retrieve notifications. &nbsp; Another advantage is that you can keep the window procedure clean of any code associated with DTWAIN. </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>A small section of code is provided here to illustrate how to use DTWAIN_SetCallback function properly (C / C++ example):</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>#include &lt;dtwain.h&gt;</p>
<p>/* Prototype for the function */</p>
<p>LRESULT CALLBACK AcquireProc(WPARAM w, LPARAM l, LONG UserData);</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>void SomeFunc( )</p>
<p>{</p>
<p> &nbsp; &nbsp; DTWAIN_SOURCE Source;</p>
<p>....</p>
<p> &nbsp; &nbsp; <a href="dtwain_sysinitialize.htm">DTWAIN_SysInitialize</a>( );</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; /* Set notification flag */</p>
<p> &nbsp; &nbsp; <a href="dtwain_enablemsgnotify.htm">DTWAIN_EnableMsgNotify</a>( TRUE );</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; /* Set the callback function */</p>
<p> &nbsp; &nbsp; <a href="dtwain_setcallback.htm">DTWAIN_SetCallback</a>(AcquireProc, 0);</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; /* ... */ </p>
<p>}</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>LRESULT CALLBACK AquireProc(WPARAM wParam, LPARAM lParam, LONG UserData)</p>
<p>{</p>
<p> &nbsp; &nbsp;switch (wParam ) &nbsp; &nbsp; &nbsp;  </p>
<p> &nbsp; &nbsp;{  </p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;/* Notification of acquisition being started */</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case DTWAIN_TN_ACQUIRESTARTED:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;/* Transfer is about to take place */</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case DTWAIN_TN_TRANSFERREADY:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; /* Transfer was done! */</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case DTWAIN_TN_TRANSFERDONE:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;/* Acquired all pages. &nbsp;We can get the DIBs! */</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case DTWAIN_TN_ACQUIREDONE:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p> &nbsp; &nbsp; }</p>
<p> &nbsp; &nbsp; return 1; &nbsp;/* Always return 1, except for some notifications noted in the <a href="dtwain_notification_codes.htm">DTWAIN Notification Codes</a> section */</p>
<p>}</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">AcquireProc</span> is called automatically by DTWAIN whenever a notification is sent while acquiring the image. &nbsp;Note that the <span style="font-weight: bold;">AcquireProc</span> in the example above always returns 1 (this is very important). &nbsp;Note that <span style="font-weight: bold;">AcquireProc</span> is a function pointer with the following prototype (C/C++ is given as an example):</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-size: 9pt; font-weight: bold;">LRESULT &nbsp;CALLBACK DTWAINCallbackProc(WPARAM wParam, LPARAM lParam, LONG UserData);</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>For <a href="dtwain_setcallback64.htm">DTWAIN_SetCallback64</a>, the <span style="font-style: italic;">UserData</span> is a 64-bit integer type, rather than a 32-bit type:</p>
<p><span style="font-size: 9pt; font-weight: bold;">LRESULT &nbsp;CALLBACK DTWAINCallbackProc64(WPARAM wParam, LPARAM lParam, DTWAIN_LONG64 UserData);</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The DTWAIN notification callback functions must be coded with these parameters (of course, they do not have to be named <span style="font-weight: bold;">AcquireProc</span> or <span style="font-weight: bold;">DTWAINCallbackProc</span> -- any legal function name appropriate to the programmer will do).  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The LRESULT is actually a LONG value. &nbsp; The CALLBACK is a constant defined by windows.h to signify that this function will be a callback function (the CALLBACK constant is only important for C or C++ programs). &nbsp; The <span style="font-style: italic;">wParam</span><span style="font-style: italic; font-weight: bold;"> </span>and <span style="font-style: italic;">lParam</span> values are the WPARAM and LPARAM of the notification that is sent to the procedure. &nbsp;The WPARAM and LPARAM values are exactly the same values that are sent when a DTWAIN notification is sent to a window. &nbsp;For example, if WPARAM is DTWAIN_TN_ACQUIREDONE, the LPARAM is actually the DTWAIN_SOURCE that has finished acquiring an image.  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The DTWAIN callback function must always return TRUE for proper processing to be done. &nbsp;The only exception to this rule is if the WPARAM value is DTWAIN_TN_PAGECONTINUE or DTWAIN_TN_TRANSFERREADY (see <a href="dtwain_notification_codes.htm">DTWAIN Notification Codes</a> for more information). &nbsp; </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>To enable DTWAIN_SetCallback, the <a href="dtwain_enablemsgnotify.htm">DTWAIN_EnableMsgNotify</a>( ) must have previously been called with a TRUE value.  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>If both <a href="dtwain_starttwainsession.htm">DTWAIN_StartTwainSession</a>( ) has been called with a valid window handle as the first parameter <span style="font-weight: bold;">and</span> there is a callback set with DTWAIN_SetCallback, the window procedure will always get the notification first, and then the callback will get the same notification afterwards. &nbsp;Therefore if both notification techniques (window procedure and callback) are used, your application must make sure that the callback will ultimately control what happens, since it is the final functions that will be called when a notification is sent.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>Note that the return value for DTWAIN_SetCallback is the previously set callback function. &nbsp;The reason for the return value being the previously set function is that this will allow function chaining. &nbsp;For example, if you need to override the behavior of a previous callback function, you install your function, and store the pointer to the old function someplace. &nbsp;Whenever your callback gets called, you can do whatever processing needs to be done with your handler, and then call the old handler that your application saved somewhere to do the default handling (or possibly you call the old handler first, and then your new handler finishes up).  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">Other Languages:</span></p>
<p>Which languages can use callback functions? &nbsp;Certainly C and C++ can be used. &nbsp;So can later versions (Version 5 and above) of Visual Basic. &nbsp;How would you know if your language supports callback functions? &nbsp;The easiest way to find out is if the language you are working with can call the Windows API function <span style="font-weight: bold;">EnumWindows</span>. &nbsp;The EnumWindows function requires a pointer to a function as one of the arguments. &nbsp;If you can get your language to call this function successfully, you can call DTWAIN_SetCallback with no problems.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">Note to C++ programmers: &nbsp;Please read!!</span></p>
<p>You cannot, repeat, cannot use a pointer to a non-static class member function as the callback function!! &nbsp;The reason why is that the callback is prototyped as a general, non-class function. &nbsp;A non-static class member function is not compatible with a traditional C or C++ function. &nbsp;A non-static class member function contains a hidden <span style="font-weight: bold;">this</span> pointer that makes it impossible to fit in with the prototype of the callback function. &nbsp;Also, the syntax required to call a non-static member using a pointer requires that the <span style="font-weight: bold;">object</span> be known to the caller. &nbsp;Since DTWAIN knows absolutely nothing about your applications classes and objects, it is impossible to call your non-static member function.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>However a <span style="font-weight: bold;">static</span> class member function can be used as a callback function, since there is no <span style="font-weight: bold;">this</span> pointer argument hidden in the prototype, and you do not need to know the class to make the callback work.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>Example:</p>
<p>class A {</p>
<p> &nbsp; &nbsp;public: </p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LRESULT CALLBACK AcquireProc1(WPARAM w, LPARAM l, LONG UData);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;static LRESULT CALLBACK AcquireProc2(WPARAM w, LPARAM l, LONG UData);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Func( );</p>
<p>};</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>void DummyFunc( )</p>
<p>{</p>
<p> &nbsp; &nbsp; A objectA;</p>
<p> &nbsp; &nbsp; DTWAIN_SetCallback(objectA.AcquireProc1, 0); &nbsp;/* Error! &nbsp;Cannot assign non-static member function to non-member function pointer */</p>
<p> &nbsp; &nbsp; DTWAIN_SetCallback(A::AcquireProc2, 0); /* OK! &nbsp;Static functions are compatible with non-member function pointers */</p>
<p>}</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The error for the first attempted call will be something like this (Visual C++ 6):</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>error C2664: 'DTWAIN_SetCallback': &nbsp;cannot convert parameter 1 from 'long (unsigned int,long)' to 'long (__stdcall *)(unsigned int,long)'</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>A lot of novice C++ programmers, as well as advanced 'C' programmers that are starting in C++ make the mistake of trying to coerce a non-static member function to be the target of a callback and are perplexed by the error that the compiler spits out back at them. &nbsp;Don't waste time trying to do this, since this is an impossible task; the C++ language just does not allow this. &nbsp; Use traditional functions as the callback (as the example above suggests), or at least, use <span style="font-weight: bold;">static</span> class member functions as callback functions. &nbsp; &nbsp;If you need to access members of a certain object, pass a pointer to the object (or the <span style="font-weight: bold;">this</span> pointer) in the <span style="font-weight: bold;">UserData</span> parameter of DTWAIN_SetCallback:</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>DTWAIN_SetCallback(A::AcquireProc2, &nbsp;(LONG)&amp;objectA); /* Passing address of object to callback function */ </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>When the callback is invoked, your application can retrieve the instance from the User Data parameter:</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>LRESULT CALLBACK A::AcquireProc2(WPARAM w, LPARAM l, UserData Data)</p>
<p>{</p>
<p> &nbsp; A* pA = static_cast&lt;A*&gt;(Data); &nbsp;// Cast the data to get the correct pointer.</p>
<p> &nbsp; pA-&gt;Func( );</p>
<p> &nbsp; return TRUE;</p>
<p>} &nbsp; </p>

</td></tr></table>

</body>
</html>
