<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Initial Setup</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?initialsetup_2.htm"; }
  else { parent.quicksync('a9.1'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Initial Setup</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="dtwaincinterface2.htm">Previous</a>&nbsp;
     <a href="version2_0overview_2.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="font-weight: bold;">Step 1 is very important. &nbsp;You will not successfully compile any modules that use the DTWAIN classes if step 1 is not followed.</span></p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">1) Namespaces</span></p>
<p>&nbsp;</p>
<p>The <span style="font-weight: bold;">namespace</span> is C++'s way of separating names into separate "blocks" so that there are no naming conflicts with your own variable names. By default, all of the DTWAIN C++ interface functions, classes, and constants are defined in the <span style="font-weight: bold;">DTWAIN</span> namespace. &nbsp;For example, to declare a DTwainAppInfo object:</p>
<p>&nbsp;</p>
<p>#include "cdtwain.h"</p>
<p>using namespace DTWAIN;</p>
<p>DTwainAppInfo AppInfo;</p>
<p>&nbsp;</p>
<p>OR </p>
<p>&nbsp;</p>
<p>#include "cdtwain.h"</p>
<p>DTWAIN::DTwainAppInfo AppInfo;</p>
<p>&nbsp;</p>
<p>OR</p>
<p>&nbsp;</p>
<p>#include "cdtwain.h"</p>
<p>using DTWAIN::DTwainAppInfo;</p>
<p>DTwainAppInfo AppInfo;</p>
<p>&nbsp;</p>
<p>If you get strange compiler errors on any definition of a DTWAIN C++ function or class, always look to see if you have informed the compiler you are using the DTWAIN namespace.  </p>
<p>&nbsp;</p>
<p>If there is a chance that you have an application that has already defined the DTWAIN namespace for your own purposes (very rare), then you will need to change the source to CDTWAIN.H to use a different namespace.</p>
<p>&nbsp;</p>
<p>Also available is the ability to turn off the namespace when compiling. &nbsp;To do this, the <span style="font-weight: bold;">DTWAIN_NO_NAMESPACE</span> preprocessor constant should be defined. &nbsp;Note that this should be done <span style="font-weight: bold;">only</span> if the compiler does not support namespaces. &nbsp;This documentation assumes you are using the DTWAIN namespace. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">2) Set the "typename" flag.</span></p>
<p>&nbsp;</p>
<p>The C++ language requires that declarations within templates that use use typenames be preceeded with the <span style="font-weight: bold;">typename</span> qualifier. &nbsp;For example, iterators that are declared in templates must use the <span style="font-weight: bold;">typename</span> qualifier.  </p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">Example:</span></p>
<p><span style="font-size: 9pt;">#include &lt;vector&gt;</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">template &lt;class T&gt;</span></p>
<p><span style="font-size: 9pt;">class foo</span></p>
<p><span style="font-size: 9pt;">{</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp;std::vector&lt;int&gt;::iterator m_iter; &nbsp;// Error</span></p>
<p><span style="font-size: 9pt;">};</span></p>
<p>&nbsp;</p>
<p>The code above will give an error for an ANSI compliant C++ compiler. &nbsp;The reason being that the compiler believes that "iterator" is a static member of std::vector, when it isn't. &nbsp;The compiler then sees "m_iter" and emits an error. &nbsp;The way to tell the compiler that "iterator" is a typename and not a static member variable is to use the <span style="font-weight: bold;">typename </span>qualifer:</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">Example:</span></p>
<p><span style="font-size: 9pt;">#include &lt;vector&gt;</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">template &lt;class T&gt;</span></p>
<p><span style="font-size: 9pt;">class foo</span></p>
<p><span style="font-size: 9pt;">{</span></p>
<p><span style="font-size: 9pt;"> &nbsp;  </span><span style="font-size: 9pt; font-weight: bold;">typename </span><span style="font-size: 9pt;">std::vector&lt;int&gt;::iterator m_iter; &nbsp;// OK</span></p>
<p><span style="font-size: 9pt;">};</span></p>
<p>&nbsp;</p>
<p>By default, the C++ classes assume that the typename qualifier is available. &nbsp;However, there are some compilers that are not ANSI standard enough to recognize the <span style="font-weight: bold;">typename</span> qualifier. &nbsp;If when you compile the DTWAIN C++ classes, you get an error that "typename" is invalid, or you get some sort of a "parse error" when compiling, you can turn off the <span style="font-weight: bold;">typename</span> by specifying <span style="font-weight: bold;">DTWAIN_NO_TYPENAME</span>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">3) include the "cdtwain.h" file in any source module where you will be calling the DTWAIN C++ routines.</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">4) Very important!!! Your application must include the following CPP files:</span></p>
<p>&nbsp;</p>
<p>BUFTRANS.CPP</p>
<p>CDTWAIN.CPP</p>
<p>CACQUIRE.CPP</p>
<p>CEXTINFO.CPP</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>If these files are not part of the project, you will in all likelihood get linker errors.</p>
<p>&nbsp;</p>
<p>The header files that are in the C++ DTWAIN interface are as follows:</p>
<p>&nbsp;</p>
<p>CDTWAIN.H</p>
<p>CDTENUM.H</p>
<p>CAPINT.INL</p>
<p>CAPSTR.INL</p>
<p>CAPFRM.INL</p>
<p>CAPSALL.INL</p>
<p>&nbsp;</p>
<p>Also. the <span style="font-weight: bold;">TWAIN.H</span> header file must also be available (this is one of the files in the DTWAIN installation's INCLUDE directory), plus the stock DTWAIN header files should also be available (DTWAIN.H, DTWAINC.H, DTWAINX.H, etc and supporting files that come with the base version of DTWAIN). &nbsp;The</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">5) If using the DYNDTWAIN classes please read:</span></p>
<p>&nbsp;</p>
<p>If you are using the DYNDTWAIN interface (which allows DTWAIN32.DLL or DTWAIN64.DLL to be loaded at run-time using LoadLibrary), you must define the pre-processor constant <span style="font-weight: bold;">DTWAIN_USEDYNDTWAIN</span> before building your application. &nbsp;You should define DTWAIN_USEDYNDTWAIN as a preprocessor symbol in your project settings, or on the command-line (usually the option is the -D compile option). &nbsp;Please consult your compiler's help documentation for this matter.  </p>
<p>&nbsp;</p>
<p>By default, DTWAIN_USEDYNDTWAIN is not defined, therefore the application will assume that the import library DTWAIN32.LIB (or some other import library that has the DTWAIN definitions defined) will be linked into your application <span style="font-weight: bold;">or</span> your application is linking to the DTWAIN <span style="font-weight: bold;">static</span> libraries (not the import libraries). &nbsp;See the main DTWAIN help manual for usage of the DYNDTWAIN interface to DTWAIN, as well as the usage of the DTWAIN static libraries.</p>
<p>&nbsp;</p>
<p>If you do define DTWAIN_USEDYNDTWAIN, you must also have as part of your project, the file <span style="font-weight: bold;">DTWIMPL.CPP</span>. &nbsp;Without this file, you will get linker errors when building the application. &nbsp;For the DTWAIN 2.0 C++ classes, to use DYNDTWAIN only requires you to define the DTWAIN_USEDYNDTWAIN constant. &nbsp;There is no need to explicitly call LoadLibrary, InitDTWAINInterface, FreeLibrary, etc as in the usual manner described in the <a href="usingdtwainwithoutanimport.htm">Dynamically Loading DTWAIN DLL at runtime</a> section. &nbsp;All of these details are taken care of by the DTWAIN C++ classes.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Do not</span> define DTWAIN_USEDYNDTWAIN if you are linking to the DTWAIN static libraries -- there is no DTWAIN32.DLL when using the static libraries, so usage of DYNDTWAIN is not possible. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold; text-decoration: underline;">Summary</span></p>
<p>So to summarize, a typical C++ application that uses the DTWAIN C++ classes will have the following source files included:</p>
<p>&nbsp;</p>
<p>YourFile1.cpp</p>
<p>YourFile2.cpp</p>
<p>// some more user files</p>
<p>//...</p>
<p>CDTwain.cpp</p>
<p>CAcquire.cpp</p>
<p>CExtInfo.cpp</p>
<p>Buftrans.cpp</p>
<p>&nbsp;</p>
<p>a) The YourFile1.cpp and YourFile2.cpp are dummy names to represent your own C++ source files that are not part of DTWAIN.  </p>
<p>b) If you define the symbol DTWAIN_USEDYNDTWAIN, then you must also include the file DTWIMPL.CPP in your project.  </p>
<p>c) The names of the DTWAIN C++ functions, classes, and constants are in the DTWAIN namespace.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
