<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Example 4: Acquire in Native mode</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?example4acquireinnativem_2.htm"; }
  else { parent.quicksync('a9.5.4'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Example 4: Acquire in Native mode</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="example3acquiretoatiffg_2.htm">Previous</a>&nbsp;
     <a href="example5outputnumericand_2.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="font-weight: bold;">Example: &nbsp;Start DTWAIN, Select a Source, Acquire all pages in Native mode. &nbsp;Destroy the generated Device Independent Bitmaps.</span></p>
<p>&nbsp;</p>
<p>#include "cdtwain.h"</p>
<p>#include &lt;iostream&gt;</p>
<p>&nbsp;</p>
<p>using namespace DTWAIN;</p>
<p>using namespace std;</p>
<p>&nbsp;</p>
<p>int main( )</p>
<p>{</p>
<p> &nbsp; // Initialize DTWAIN - return if initialization does not work</p>
<p> &nbsp; <a href="dtwaininterface2.htm">DTwainInterface</a> TI;</p>
<p> &nbsp; if ( !TI.<a href="cdtwaininterfaceisvalid_2.htm">IsValid</a>( ) ) </p>
<p> &nbsp; &nbsp; &nbsp; return 0;</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare a Source and assign the default TWAIN source to it</p>
<p> &nbsp; DTwainSource Source = <a href="dtwainsourceselect.htm">DTwainSource::Select</a>( );</p>
<p> &nbsp; if ( !Source.IsValid( ) )</p>
<p> &nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare an acquisition object, and attach the source to it</p>
<p> &nbsp; <a href="dtwainacquirer.htm">DTwainAcquirer</a> Acq(Source);</p>
<p> &nbsp; </p>
<p> &nbsp; // Set the acquire type to Native</p>
<p> &nbsp; Acq.<a href="dtwainacquiresetacquiretype_2.htm">SetAcquireType</a>(TWAIN_ACQUIRENATIVE);</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the maximum pages to acquire</p>
<p> &nbsp; Acq.<a href="dtwainacquirersetmaxpagestoa_2.htm">SetMaxPages</a>( DTWAIN_ACQUIREALL );</p>
<p>&nbsp;</p>
<p> &nbsp; // Start the acquisition</p>
<p> &nbsp; if ( !Acq.<a href="dtwainacquireacquire_2.htm">Acquire</a>( ) )</p>
<p> &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;// Acquisition failed</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return 0;</p>
<p> &nbsp; }</p>
<p>&nbsp;</p>
<p> &nbsp; // get all the bitmaps (DIBs) that have been acquired</p>
<p> &nbsp; <a href="arrayclasses_2.htm">DTwainAcquisitionArray</a> AllDibs;</p>
<p> &nbsp; Acq.<a href="dtwainacquirergetallacquisit_2.htm">GetAllAcquisitions</a>( AllDibs );</p>
<p>&nbsp;</p>
<p> &nbsp; // AllDibs is a two-dimensional "array" (actually a two-dimensional vector).</p>
<p> &nbsp; // The first index is the acquisition (which is an array of image data), the second index is the page</p>
<p> &nbsp; // data itself. &nbsp; &nbsp;The page data is stored in a DTwainImageData object.</p>
<p> &nbsp; // So, if there are 2 acquisitions, and in acquisition 1 there are 3 pages,</p>
<p> &nbsp; // and acquisition 2 has 1 page, the following is true:</p>
<p> &nbsp; //</p>
<p> &nbsp; // AllDibs[0][0] is acquisition 1, page 1's DIB (represented as a DTwainImageData object)</p>
<p> &nbsp; // AllDibs[0][1] is acquisition 1, page 2's DIB (represented as a DTwainImageData object)</p>
<p> &nbsp; // AllDibs[0][2] is acquisition 1, page 3's DIB (represented as a DTwainImageData object)</p>
<p> &nbsp; // AllDibs[1][0] is acquisition 2, page 1's DIB (represented as a DTwainImageData object)</p>
<p> &nbsp; //</p>
<p> &nbsp; // To get a handle to the DIB for a particular acquisition and page</p>
<p> &nbsp; // HANDLE hDib = AllDibs[0][1].GetImageData( ); // Handle to acquisition 1, page 2 image data.</p>
<p> &nbsp; // </p>
<p> &nbsp; // To get an array of DIBs for a particular acquisition:</p>
<p> &nbsp; // DTwainImageDataArray DibsForAcq1 = AllDibs[0]; // All Dibs for acquisition 1</p>
<p> &nbsp; // </p>
<p> &nbsp; // To make sure that you are accessing a valid subscript, it is safer to first get the number of acquisitions and pages</p>
<p> &nbsp; // instead of using operator [] first.</p>
<p>&nbsp;</p>
<p> &nbsp; cout &lt;&lt; "The number of acquisitions attempted are " &lt;&lt; AllDibs.size( ) &lt;&lt; endl;</p>
<p>&nbsp;</p>
<p> &nbsp; // Now get the number of acquisitions.  </p>
<p> &nbsp; int nAcquisitions = AllDibs.size( );</p>
<p> &nbsp; for ( int i = 0; i &lt; nAcquisitions; ++i )</p>
<p> &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp;// Get array of DTwainImageData for acquisition i</p>
<p> &nbsp; &nbsp;  <a href="arrayclasses_2.htm">DTwainImageDataArray</a> AData = AllDibs[i];  </p>
<p> &nbsp; &nbsp; &nbsp;cout &lt;&lt; "For acquisition " &lt;&lt; i &lt;&lt; ", there are (is) " &lt;&lt; AData.size( ) &lt;&lt; " Dibs (pages)" &lt;&lt; endl;</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp;// Now free the image data here. &nbsp;This does it in a loop, but there are other ways to do</p>
<p> &nbsp; &nbsp; &nbsp;// this without a loop. &nbsp;Also note you can use the traditional array operator [] to access the</p>
<p> &nbsp; &nbsp; &nbsp;// image information, but for illustrative purposes, we will use the STL iterator to loop through the </p>
<p> &nbsp; &nbsp; &nbsp;// array of DTwainImageInfo</p>
<p> &nbsp; &nbsp;  <a href="arrayclasses_2.htm">DTwainImageDataArray</a>::iterator start = AData.begin( );</p>
<p> &nbsp; &nbsp; &nbsp;DTwainImageDataArray::iterator stop = AData.end( );</p>
<p> &nbsp; &nbsp;  </p>
<p> &nbsp; &nbsp;  <a href="dtwainimagedata.htm">DTwainImageData</a> ImageData; // represents the raw image data for a single page</p>
<p> &nbsp; &nbsp; &nbsp;while ( start != stop )</p>
<p> &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ImageData = *start; &nbsp;// get the current DTwainImageData object</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HANDLE hDib = ImageData.<a href="dtwainimagedatagetimagedata.htm">GetImageData</a>( );</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;GlobalFree( hDib ); &nbsp;// Free the data here</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;++start;</p>
<p> &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp;}</p>
<p>} &nbsp;// Twain is shut down automatically on exit</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
