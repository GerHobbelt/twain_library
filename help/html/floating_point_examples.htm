<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>XBase++ Floating Point DTWAIN Examples</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?floating_point_examples.htm"; }
  else { parent.quicksync('a2.6.1.1'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">XBase++ Floating Point DTWAIN Examples</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="floating_point_variables_in_xb.htm">Previous</a>&nbsp;
     <a href="python_development.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>Here are some examples of usage of XBase++ and handling of floating point in DTWAIN:</p>
<p>&nbsp;</p>
<p>Example 1: Set the current resolution value:</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">#include "Dll.ch"</span></p>
<p>#include "DTWAIN32.CH"</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">PROCEDURE Main</span></p>
<p><span style="font-size: 9pt;"> &nbsp; LOCAL TwainSource, nDLLHandle, res, returnValue</span></p>
<p><span style="font-size: 9pt;"> &nbsp; LOCAL retStr := Space(254)</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Load the DTWAIN DLL */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; nDLLHandle := DllLoad( "DTWAIN32.DLL" )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Initialize DTWAIN */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; DLLCall (nDLLHandle,DLL_STDCALL, "<a href="dtwain_sysinitialize.htm">DTWAIN_SysInitialize</a>")</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Get a TWAIN Source from Select Source Dialog */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; TwainSource := DLLCall(nDLLHandle,DLL_STDCALL, "<a href="dtwain_selectsource.htm">DTWAIN_SelectSource</a>")</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* If user selected a source, attempt to set the resolution to 300 */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; IF &nbsp;TwainSource &lt;&gt; 0</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; returnValue := DLLCall(nDLLHandle,DLL_STDCALL,"<a href="dtwain_setresolutionstring.htm">DTWAIN_SetResolutionString</a>", TwainSource, "300.0")</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; IF returnValue &lt;&gt; 0</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Resolution set successfully */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DLLCall(nDLLHandle, DLL_STDCALL, "<a href="dtwain_getresolutionstring.htm">DTWAIN_GetResolutionString</a>", TwainSource, @retStr)</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; ENDIF</span></p>
<p><span style="font-size: 9pt;"> &nbsp; ENDIF</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Uninitialize DTWAIN and unload the DLL */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; DLLCall(nDLLHandle,DLL_STDCALL,"<a href="dtwain_sysdestroy.htm">DTWAIN_SysDestroy</a>")</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; DllUnload( nDLLHandle )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">RETURN</span></p>
<p>&nbsp;</p>
<hr noshade size=1 style="color : #000000"><p>&nbsp;</p>
<p>In Example 1, the function DTWAIN_SetResolutionString and DTWAIN_GetResolutionString act exactly the same as <a href="dtwain_setresolution.htm">DTWAIN_SetResolution</a> and <a href="dtwain_getresolution.htm">DTWAIN_GetResolution</a>, with the lone exception being that the last parameter of the DTWAIN_xxxString() function is a string value instead of a DTWAIN_FLOAT. &nbsp;This allows XBase++ programmers to use string values instead of floating point variables that may not be compatible to Windows 64-bit types.</p>
<p>&nbsp;</p>
<hr noshade size=1 style="color : #000000"><p>&nbsp;</p>
<p>Example 2: &nbsp;Get all of the resolution values. &nbsp;This example shows conversion of an array of floating point values to fixed point values.</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">#include "Dll.ch"</span></p>
<p><span style="font-size: 9pt;">#include "DTWAIN32.CH"</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">PROCEDURE Main</span></p>
<p><span style="font-size: 9pt;"> &nbsp; LOCAL TwainSource, nDLLHandle, res, returnValue, fixedPtArray, floatArray, numValues, whole, frac</span></p>
<p><span style="font-size: 9pt;"> &nbsp; LOCAL strValue</span></p>
<p><span style="font-size: 9pt;"> &nbsp; floatArray := 1</span></p>
<p><span style="font-size: 9pt;"> &nbsp; whole := 1</span></p>
<p><span style="font-size: 9pt;"> &nbsp; frac := 1</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Load the DTWAIN DLL */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; nDLLHandle := DllLoad( "DTWAIN32.DLL" )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Initialize DTWAIN */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; DLLCall( nDLLHandle,DLL_STDCALL, "<a href="dtwain_sysinitialize.htm">DTWAIN_SysInitialize</a>" )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Get a TWAIN Source from Select Source Dialog */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; TwainSource := DLLCall( nDLLHandle, DLL_STDCALL, "<a href="dtwain_selectsource.htm">DTWAIN_SelectSource</a>" )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* If user selected a source, attempt to get all of the resolution values */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; IF &nbsp;TwainSource &lt;&gt; 0</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; DLLCall ( nDLLHandle, DLL_STDCALL, "<a href="dtwain_enumresolutionvalues.htm">DTWAIN_EnumResolutionValues</a>", TwainSource, @floatArray, 1 )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; /* get the number of values in the array */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; numValues := DLLCall ( nDLLHandle, DLL_STDCALL, "<a href="dtwain_arraygetcount.htm">DTWAIN_ArrayGetCount</a>" ,floatArray )</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; /* Convert to fixed point array */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; fixedPtArray := DllCall( nDLLHandle, DLL_STDCALL, "<a href="dtwain_arrayconvertfloattofix3.htm">DTWAIN_ArrayConvertFloatToFix32</a>", floatArray)</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; SET DEVICE TO SCREEN </span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; @ 0, 0 SAY "Resolution Values are as follows:"</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; FOR i := 1 TO numValues </span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // whole and frac contain the values in the array</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DLLCall( nDLLHandle, DLL_STDCALL, "<a href="dtwain_arrayfix32getat.htm">DTWAIN_ArrayFix32GetAt</a>", fixedPtArray, i-1, @whole, @frac)</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strValue := LTrim(Str(whole)) + "." + LTrim(Str(frac))</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @ i, 0 SAY strValue</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; NEXT</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; Inkey(0)</span></p>
<p><span style="font-size: 9pt;"> &nbsp; ENDIF</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; /* Uninitialize DTWAIN and unload the DLL */</span></p>
<p><span style="font-size: 9pt;"> &nbsp; DLLCall(nDLLHandle,DLL_STDCALL,"<a href="dtwain_sysdestroy.htm">DTWAIN_SysDestroy</a>")</span></p>
<p><span style="font-size: 9pt;"> &nbsp; DllUnload( nDLLHandle )</span></p>
<p><span style="font-size: 9pt;">RETURN</span></p>
<hr noshade size=1 style="color : #000000"><p>&nbsp;</p>
<p><span style="font-size: 9pt;">Note that the call to <a href="dtwain_arrayconvertfloattofix3.htm">DTWAIN_ArrayConvertFloatToFix32</a> converts the array of 64-bit floating point values to an array of fixed point values (The device resolution values are potentially floating point value, thus the need to use floating point types to store this information). &nbsp;Once that's done, to get the whole number and fractional portion of the fixed point number, the DTWAIN_ArrayFix32GetAt function returns the whole number and fractional portion of the desired number.</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">Please note:  </span></p>
<p><span style="font-size: 9pt;">There are functions named F2Bin( ) and Bin2F( ) defined for XBase++. &nbsp;However with our experience using these functions, the floating point values passed to the DTWAIN functions do not convert to proper IEEE 64-bit values that adhere to the same layout that C or C++ expects. &nbsp;Therefore it is best to have DTWAIN functions interpret the values in a safe, sure way, and that is to use the string versions of the DTWAIN functions that require floating point data.</span></p>

</td></tr></table>

</body>
</html>
