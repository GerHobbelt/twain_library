<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Example 13: High speed scanning</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?example13highspeedscannin_2.htm"; }
  else { parent.quicksync('a9.5.13'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Example 13: High speed scanning</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="example12retrievingextende_2.htm">Previous</a>&nbsp;
     <a href="example_14_job_and_batch_proce.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="font-weight: bold;">Example: &nbsp;Acquire images using device that supports high-speed scanning.</span></p>
<p>&nbsp;</p>
<p>To get the most out of a Twain driver when it comes to speed, the following tips should be followed when setting the Twain device:</p>
<p>&nbsp;</p>
<p>1) Device should support buffered transfers with compression (if available)</p>
<p>2) Device should support batch buffers (if available)</p>
<p>3) Device should support auto-scan (if available)</p>
<p>4) Images should be low resolution or black and white.</p>
<p>&nbsp;</p>
<p><span style="font-weight: bold;">Example: &nbsp;Acquiring using the buffered mode with compression and with maximum usage of the device's buffering capabilities. &nbsp;Write each image to a raw file.</span></p>
<p>&nbsp;</p>
<p>#include "cdtwain.h" &nbsp;// CDTwain</p>
<p>#include &lt;iostream&gt;</p>
<p>#include &lt;algorithm&gt; &nbsp;// for sort</p>
<p>#include &lt;string&gt;</p>
<p>&nbsp;</p>
<p>using namespace DTWAIN;</p>
<p>using namespace std; // for &lt;iostream&gt; </p>
<p>&nbsp;</p>
<p>void ExpandTheRange( DTwainSource&amp; Source, DTwainLongArray&amp; array, int nCap)</p>
<p>{</p>
<p> &nbsp; if ( Source.IsCapContainerRange( nCap ) )</p>
<p> &nbsp; &nbsp; &nbsp;  <a href="ctdrange_ctdrange.htm">DTwainLongRange</a>( ).<a href="dtwainrangecopyarraytorange.htm">CopyArrayToRange</a>( array ).<a href="ctdrange_expand.htm">Expand</a>( array ); </p>
<p>}</p>
<p>&nbsp;</p>
<p>int main( )</p>
<p>{</p>
<p> &nbsp; // Initialize DTWAIN - return if initialization does not work</p>
<p> &nbsp; <a href="dtwaininterface2.htm">DTwainInterface</a> TI;</p>
<p> &nbsp; if ( !TI.IsValid( ) ) </p>
<p> &nbsp; &nbsp; &nbsp; return 0;</p>
<p>&nbsp;</p>
<p> &nbsp; // Declare a Source and assign the default TWAIN source to it</p>
<p> &nbsp; <a href="dtwainsource.htm">DTwainSource</a> Source = <a href="dtwainsourceselect.htm">DTwainSource::Select</a>( );</p>
<p> &nbsp; if ( !Source.IsValid( ) )</p>
<p> &nbsp; &nbsp; &nbsp;return 0;</p>
<p>&nbsp;</p>
<p> &nbsp; // Enable the feeder</p>
<p> &nbsp; if (Source.IsFeederSupported( ) )</p>
<p> &nbsp; &nbsp; &nbsp; Source.EnableFeeder(true);</p>
<p>&nbsp;</p>
<p> &nbsp; // Check for Autoscan. &nbsp;Enable if it's available</p>
<p> &nbsp; if ( Source.IsCapSupported( DTWAIN_CV_CAPAUTOSCAN ) )</p>
<p> &nbsp; &nbsp; &nbsp;Source.SetSingleCapValue( DTWAIN_CV_CAPAUTOSCAN, 1L );</p>
<p>&nbsp;</p>
<p> &nbsp;// Check for the maximum batch buffers</p>
<p> &nbsp;if ( Source.IsMaxBuffersSupported( ))</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp;LONG MaxBatchBuffers;</p>
<p> &nbsp; &nbsp; &nbsp;// Get the max batch buffers</p>
<p> &nbsp; &nbsp; &nbsp;DTwainLongArray aMaxBuffers;</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp;if ( Source.EnumMaxBuffers( aMaxBuffers ) &amp;&amp; (aMaxBuffers.size( ) &gt; 0) )</p>
<p> &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Expand the buffer if the capabilities are returned in a range</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExpandTheRange( Source, aMaxBuffers, DTWAIN_CV_CAPMAXBATCHBUFFERS );</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // sort the values in ascending order</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sort( aMaxBuffers.begin( ), aMaxBuffers.end( ) );</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Set the max batch buffers by giving the highest value</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MaxBatchBuffers = aMaxBuffers[aMaxBuffers.size( ) - 1];</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ( Source.SetMaxBuffers( MaxBatchBuffers ) )</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cout &lt;&lt; "Max batch buffers set to " &lt;&lt; MaxBatchBuffers;</p>
<p> &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; }</p>
<p>&nbsp;</p>
<p> &nbsp; // Create an acquire object, attach the source</p>
<p> &nbsp; <a href="dtwainacquirer.htm">DTwainAcquirer</a> Acq( Source );</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the acquire type to buffered mode</p>
<p> &nbsp; Acq.SetAcquireType( TWAIN_ACQUIREBUFFERED );</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the maximum number of pages</p>
<p> &nbsp; Acq.SetMaxPages( DTWAIN_ACQUIREALL );</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the pixel type to black and white (1 bpp)</p>
<p> &nbsp; Acq.SetColorType( COLORTYPE_BW );</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the UI mode to false (turn off UI when acquiring images)</p>
<p> &nbsp; Acq.SetUIMode( false );</p>
<p>&nbsp;</p>
<p> &nbsp; // Create a buffered transfer helper object, and attach Source to the object, </p>
<p> &nbsp; <a href="dtwainbufferedtransfer.htm">DTwainBufferedTransfer</a> BT(Source);</p>
<p>&nbsp;</p>
<p> &nbsp; // Get the compression types. &nbsp;If TIFF is available, we'll choose it</p>
<p> &nbsp; // Otherwise, we'll choose &nbsp;BMP (JPEG compression is also possible if supported by the Source)</p>
<p> &nbsp; std::string Ext = ".BMP";</p>
<p> &nbsp; DTwainCompressionType CompType = COMPRESS_NONE;</p>
<p> &nbsp; if ( BT.IsTiffCompressionSupported( ) )</p>
<p> &nbsp; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;CompType = BT.GetBestCompressionType( COMPRESS_TIFF, true ); &nbsp;// Get best compression for black/white pages (1 bit-per-pixel transfers)</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;Ext = ".TIF";</p>
<p> &nbsp; }</p>
<p> &nbsp; else</p>
<p> &nbsp; if ( BT.IsBMPCompressionSupported( ) )</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;CompType = BT.GetBestCompressionType( COMPRESS_BMP, true ); // get best compression for black/white pages.</p>
<p>&nbsp;</p>
<p> &nbsp; // Set the compression type</p>
<p> &nbsp; BT.SetCompressionType( CompType );  </p>
<p>&nbsp;</p>
<p> &nbsp; // Now set the strip size. &nbsp;Preferred strip size is the best for the fastest transfer </p>
<p> &nbsp; BT.SetStripSize( BT.GetPreferredStripSize( ) );</p>
<p>&nbsp;</p>
<p> &nbsp; // Attach to a special buffered transfer listener that writes images to files and increments the</p>
<p> &nbsp; // file name to the "next" file.</p>
<p> &nbsp; std::string fName = "FILE000";</p>
<p> &nbsp; fName += Ext;</p>
<p> &nbsp; DTwainBufferedListener Listener( fName, &amp;BT );</p>
<p> &nbsp; Acq.AddListener( &amp;Listener );</p>
<p>&nbsp;</p>
<p> &nbsp; // Start the acquisition</p>
<p> &nbsp; Acq.Acquire( BT );<span style="font-size: 12pt;"> &nbsp;  </span></p>
<p>} // If acquisition completed, raw data files FILE000, FILE001, FILE002, etc. should be available with maximum supported TIFFor BMP compression.  </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Note that the files themselves will not have the image file header, since the device does not generate image headers. &nbsp;The only thing in FILE000, FILE001, etc. is the raw image data. &nbsp;If your application desires to attach the image header to the front of the data before it is written to the file the following steps should be done: </p>
<p>&nbsp;</p>
<p>1) Derive a listener from DTwainBufferedListener, and override the OnTransferReady function. &nbsp;Retrieve the image information by calling DTwainSource::GetImageInfo. &nbsp;This information is needed for you to build the header. &nbsp;If the image information is not available (i.e. the resolution value, image width/length, etc. are -1), then the device does not have the information ready when OnTransferReady is called. &nbsp;In these cases, OnTransferDone should be overridden, and call DTwainSource::GetImageInfo should be done to retrieve the image information after the transfer has completed.</p>
<p>&nbsp;</p>
<p>2) In the OnTransferReady or OnTransferDone method, the buffer is available using the DTwainBufferedListener::GetImageDataBuffer. &nbsp;Your application will create the header, and write it to the head of this buffer. &nbsp;Since the buffer is stored in a std::string variable, it is trivial to attach the data at the beginning:</p>
<p> &nbsp; &nbsp;  </p>
<p>3) Make sure that the overridden OnTransferReady calls the DTwainBufferedListener::OnTransferReady or DTwainBufferedListener::OnTransferDone first. </p>
<p>&nbsp;</p>
<p>4) In the main application, use your class derived from DTwainBufferedListener when adding the listener to the DTwainAcquirer class.</p>
<p>&nbsp;</p>
<p>In summary your OnTransferReady( ) function would look similar to the following (the code to build the buffer is the application's responsibility). &nbsp;Assume that MyBufferedListener is a class derived publicly from DTwainBufferedListener:</p>
<p>&nbsp;</p>
<p>class MyBufferedListener : public DTwainBufferedListener</p>
<p>{</p>
<p> &nbsp; &nbsp; public:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;virtual LRESULT OnTransferReady( DTwainSource&amp; Source, LONG UserParam );</p>
<p> &nbsp; &nbsp; //..</p>
<p>};</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>LRESULT MyBufferedListener::OnTransferReady(DTwainSource&amp;Source, LONG UserParam)</p>
<p>{</p>
<p> &nbsp; &nbsp; // Call the parent function first</p>
<p> &nbsp; &nbsp; DTwainBufferedListener::OnTransferReady( Source, UserParam );</p>
<p> &nbsp;  </p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; std::string&amp; TheBuffer = GetImageDataBuffer( );</p>
<p> &nbsp; &nbsp; std::string TheHeader;</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; DTwainImageInfo ImageInfo;</p>
<p> &nbsp; &nbsp; Source.GetImageInfo( ImageInfo );</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; // App builds the header based on the image info retrieved</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; // Attach the built header to the front of the buffer.</p>
<p> &nbsp; &nbsp; TheBuffer = TheHeader + TheBuffer;</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; return 1;</p>
<p>}</p>
<p>&nbsp;</p>
<p>If you are overriding OnTransferDone instead of OnTransferReady, the image data is already present, so you must take care not to remove or erase this data. &nbsp;The code above (TheBuffer = TheHeader + TheBuffer) is safe to do in either OnTransferReady or OnTransferDone, since the buffer is preserved. &nbsp;The std::string class is capable of storing binary data by using the std::string::append( ) function, so you can create the header data within the std::string itself.</p>
<p>&nbsp;</p>
<p>By default DTwainBufferedListener::OnTransferDone takes the data and writes to a file. &nbsp;If you want to do something else with the data (maybe feed it to another imaging component that takes raw data and applies a header to it), then your derived class from DTwainBufferedListener should not call the default OnTransferDone.</p>
<p>&nbsp;</p>
<p>The example below shows the difference if you need to override OnTransferDone:</p>
<p>&nbsp;</p>
<p>class MyBufferedListener : public DTwainBufferedListener</p>
<p>{</p>
<p> &nbsp; &nbsp; public:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;virtual LRESULT OnTransferDone( DTwainSource&amp; Source, LONG UserParam );</p>
<p> &nbsp; &nbsp; //..</p>
<p>};</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>LRESULT MyBufferedListener::OnTransferDone(DTwainSource&amp;Source, LONG UserParam)</p>
<p>{</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; std::string&amp; TheBuffer = GetImageDataBuffer( );</p>
<p> &nbsp; &nbsp; std::string TheHeader;</p>
<p>&nbsp;</p>
<p> &nbsp; &nbsp; DTwainImageInfo ImageInfo;</p>
<p> &nbsp; &nbsp; Source.GetImageInfo( ImageInfo );</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; // App builds the header based on the image info retrieved</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; // Attach the built header to the front of the buffer.</p>
<p> &nbsp; &nbsp; TheBuffer = TheHeader + TheBuffer;</p>
<p> &nbsp; &nbsp; //...</p>
<p> &nbsp; &nbsp; // Call the parent function last to finish up</p>
<p> &nbsp; &nbsp; DTwainBufferedListener::OnTransferDone( Source, UserParam );</p>
<p> &nbsp;  </p>
<p> &nbsp; &nbsp; return 1;</p>
<p>}</p>
<p>&nbsp;</p>
<p>Note that the difference is that the parent function OnTransferDone, is called last, so that the DTwainBufferedListener has the chance to write the data to a file.</p>

</td></tr></table>

</body>
</html>
