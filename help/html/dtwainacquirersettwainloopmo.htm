<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>DTwainAcquirer::SetTwainLoopMode</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?dtwainacquirersettwainloopmo.htm"; }
  else { parent.quicksync('a9.13.27'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">DTwainAcquirer::SetTwainLoopMode</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="dtwainacquirersetprogressbar_2.htm">Previous</a>&nbsp;
     <a href="dtwainacquirersetuimode_2.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p><span style="font-weight: bold;">Syntax</span></p>
<p><span style="font-size: 2pt; font-family: 'Times New Roman'; color: #010100;">&nbsp;</span></p>
<p><span style="font-weight: bold;">DTwainAcquirer&amp; SetTwainLoopMode( DTwainLoopMode LoopMode = LOOP_MODAL );</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">Parameters</span></p>
<p><span style="font-style: italic;">LoopMode</span></p>
<p>Sets the loop mode used when acquiring images.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">Return Value</span></p>
<p>Returns reference to current DTwainAcquirer object (<span style="font-weight: bold;">*this</span>).</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-size: 2pt; font-family: 'Times New Roman'; color: #010100;">&nbsp;</span></p>
<p><span style="font-weight: bold;">Comments</span></p>
<p>Sets the "TWAIN loop mode" when acquiring images. &nbsp;The <span style="font-style: italic;">LoopMode</span> must be either <span style="font-weight: bold;">LOOP_MODAL</span> or <span style="font-weight: bold;">LOOP_MODELESS</span>. &nbsp;If the mode is LOOP_MODAL, then DTWAIN will employ an internal message loop when the acquisition process has started. &nbsp;If the mode is <span style="font-weight: bold;">LOOP_MODELESS</span>, then the DTWAIN C++ wrapper class will be responsible for the message loop.</p>
<p>&nbsp;</p>
<p>For TWAIN devices and image retrieval to work correctly during the acquisition process, a message loop must be executed that checks for TWAIN messages, as well as application specific messages. &nbsp;When <span style="font-weight: bold;">LOOP_MODAL</span> is used, this loop is implemented and executed within the DTWAIN library. &nbsp;When LOOP_MODELESS is used, then DTWAIN will not execute the internal loop, and the application (in this case, the C++ wrapper class) is responsible for the TWAIN loop.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="text-decoration: underline;">LOOP_MODELESS processing</span></p>
<p>&nbsp;</p>
<p>For most Source's, the <span style="font-weight: bold;">LOOP_MODAL</span> is adequate. &nbsp;However, if you wish for your application to control the message loop during an acquisition, you should use LOOP_MODELESS. &nbsp;The C++ wrapper has a function defined in CACQUIRE.CPP called <span style="font-weight: bold;">TwainLoop</span>. &nbsp;The loop within this function is the TWAIN message loop that LOOP_MODELESS uses.  </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">Please note: &nbsp;the next section is meant for programmers who are familiar with the Windows API application loop processing:</span></p>
<p>&nbsp;</p>
<p>For those familiar with Win32 API programming, note that <span style="font-weight: bold;">TwainLoop</span> incorporates a generic Window's message loop, with a few differences:</p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">MSG msg;</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">int val;</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">/* Perform a loop until acquisitions are done */</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">while (((val = GetMessage (&amp;msg, NULL, 0, 0)) != -1) // while there is a message</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">&amp;&amp; DTWAIN_IsUIEnabled(m_TS.GetSource())) &nbsp; &nbsp; &nbsp; &nbsp; // and the Source is acquiring</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">{</span></p>
<p><span style="width:24px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">if ( val != 0 )</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">  &nbsp; &nbsp; &nbsp; &nbsp;if ( !DTWAIN_IsTwainMsg(&amp;msg) ) &nbsp;// send message to TWAIN if DTWAIN message</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">{</span></p>
<p><span style="width:120px">&nbsp;</span><span style="font-size: 9pt;">if ( !m_HookProc || (*m_HookProc)(this,&amp;msg)) // User-defined message processing (i.e. IsDialogMessage)</span></p>
<p><span style="width:120px">&nbsp;</span><span style="font-size: 9pt;">{</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">TranslateMessage (&amp;msg); &nbsp; &nbsp;// send message to app, not TWAIN</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">DispatchMessage (&amp;msg);</span></p>
<p><span style="width:96px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">}</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">}</span></p>
<p>&nbsp;</p>
<p>The while( ) loop effectively terminates if the TWAIN driver's user interface is disabled, or if no user interface, when all the pages are acquired.  </p>
<p>&nbsp;</p>
<p>The function DTWAIN_IsTwainMsg( ) is called to determine if the next message in the application loop is meant for the TWAIN manager and driver (in this case, the message is not sent to your application), or if it is a "normal" application message.  </p>
<p>&nbsp;</p>
<p>The <span style="font-weight: bold;">m_HookProc</span> is a special function pointer of type <span style="font-weight: bold;">TWAINLOOPHOOKPROC</span>. &nbsp;This function pointer can point to any application specific processing that you may need to do before passing the message to TranslateMessage and DispatchMessage. &nbsp;By default, this function pointer is NULL (meaning no hook procedure has been defined).</p>
<p>&nbsp;</p>
<p>The m_HookProc has the following prototype:</p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">typedef bool (*TWAINLOOPHOOKPROC) (<a href="dtwainacquirer.htm">DTwainAcquirer</a>*, MSG*);</span></p>
<p>&nbsp;</p>
<p>The application just needs to define a function that has the prototype above, and assign it to the hook procedure by calling DTwainAcquirer::SetTwainLoopHookProc:</p>
<p>&nbsp;</p>
<p>For example, many user-defined message loops must employ modeless dialog or accelerator key processing.</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MSG msg;</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HWND someDlgWindow;</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // assume window is valid and denotes a modeless dialog box...</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Check if the message is meant for our modeless dialog box &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( !someDlgWindow || !IsDialogMessage( someDlgWindow, &amp;msg) )</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TranslateMessage (&amp;msg); &nbsp; &nbsp;// send message to app, not TWAIN</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DispatchMessage (&amp;msg);</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p>&nbsp;</p>
<p>In the example above, the extra processing required is a test to see if the message is meant for the modeless dialog. &nbsp;If it isn't, then it is passed onto the TranslateMessage / DispatchMessage functions (if you are not familiar with this, the IsDialogMessage( ) is a Windows API function, and must be called to process any keyboard keys to a modeless dialog.).  </p>
<p>&nbsp;</p>
<p>In this example, the hook procedure would be something like this:</p>
<p>&nbsp;</p>
<p>bool MyHookProc( DTwainAcquirer* pAcq, MSG* pMsg )</p>
<p>{</p>
<p> &nbsp; if (!someDlgWindow || <span style="font-size: 9pt;">!IsDialogMessage( someDlgWindow, pMsg) )</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return true;</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp;return false;</span></p>
<p><span style="font-size: 9pt;">}</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 9pt;">//...</span></p>
<p><span style="font-size: 9pt;">DTwainAcquirer Acq;</span></p>
<p><span style="font-size: 9pt;">Acq.SetTwainHookProc( MyHookProc );</span></p>
<p><span style="font-size: 9pt;">//...</span></p>
<p>&nbsp;</p>
<p>If the hook procedure wants the TWAIN loop to go ahead and call TranslateMessage and DispatchMessage, then <span style="font-weight: bold;">true </span>is returned, otherwise <span style="font-weight: bold;">false</span> is returned. &nbsp;The parameters that are passed are pointers to the current DTwainAcquirer object, and a pointer to the MSG (message) structure that was retrieved in the GetMessage( ) loop.</p>
<p>&nbsp;</p>
<p>The code above sets the hook procedure to MyHookProc. &nbsp;So the end result is that when LOOP_MODELESS processing is used, the following application loop is essentially done:</p>
<p>&nbsp;</p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">MSG msg;</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">int val;</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">/* Perform a loop until acquisitions are done */</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">while (((val = GetMessage (&amp;msg, NULL, 0, 0)) != -1) // while there is a message</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">&amp;&amp; DTWAIN_IsUIEnabled(m_TS.GetSource())) &nbsp; &nbsp; &nbsp; &nbsp; // and the Source is acquiring</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">{</span></p>
<p><span style="width:24px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">if ( val != 0 )</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">  &nbsp; &nbsp; &nbsp; &nbsp;if ( !DTWAIN_IsTwainMsg(&amp;msg) ) &nbsp;// send message to TWAIN if DTWAIN message</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">{</span></p>
<p><span style="width:120px">&nbsp;</span><span style="font-size: 9pt;">// This is executed</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp;if ( !m_HookProc || (*m_HookProc)(this,&amp;msg))</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The following is actually done, given the hook procedure we created above</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// if (!someDlgWindow || !IsDialogMessage( someDlgWindow, &amp;msg) )</span></p>
<p>&nbsp;</p>
<p><span style="width:120px">&nbsp;</span><span style="font-size: 9pt;">if ( !m_HookProc || (*m_HookProc)(this,&amp;msg)) // User-defined message processing (i.e. IsDialogMessage)</span></p>
<p><span style="width:120px">&nbsp;</span><span style="font-size: 9pt;">{</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">TranslateMessage (&amp;msg); &nbsp; &nbsp;// send message to app, not TWAIN</span></p>
<p><span style="width:48px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">DispatchMessage (&amp;msg);</span></p>
<p><span style="width:96px">&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 9pt;">}</span></p>
<p><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></p>
<p><span style="width:48px">&nbsp;</span><span style="font-size: 9pt;">}</span></p>
<p>&nbsp;</p>
<p>Since many Windows C++ applications have customized loop processing (accelerator processing, modeless window processing, checking for a button press while a long operation is in session, etc.), usage of LOOP_MODELESS processing, plus the use of the hook procedure, allows the application to stil have the other processing to work simultaneously with the acquisition of the images.</p>
<p>&nbsp;</p>

</td></tr></table>

</body>
</html>
