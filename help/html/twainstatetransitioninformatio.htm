<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>TWAIN State Transition</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="dtwain32_popup_html.js"></script><script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?twainstatetransitioninformatio.htm"; }
  else { parent.quicksync('a7.5'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p><span class="f_Heading1">TWAIN State Transition Information</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm">Top</a>&nbsp;
     <a href="twain_data_source.htm">Previous</a>&nbsp;
     <a href="sourceuserinterface.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>The sequence of events that controls a TWAIN session and the application are called <span style="font-weight: bold;">states.  </span>For a protocol such as TWAIN to function properly, the application must call certain functions at specific points during the lifetime of a TWAIN session. &nbsp;Some of these functions include opening the Source Manager, Opening the Source, setting the Source capabilities, preparing for the image acquisition to begin, closing the Source and Source Manager, etc. &nbsp;For these events to occur without error, it makes sense that these functions must be called in a specific sequence.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>TWAIN defines seven states that can exist during a TWAIN session. &nbsp;The seven states are as follows:</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_1491286190X, true);" class="popuplink">State 1 (Source Manager Not Loaded)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_1665431485X, true);" class="popuplink">State 2 (Source Manager Loaded/Unloaded)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_935026813X, true);" class="popuplink">State 3 (Source Manager Opened/Closed)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_995107139X, true);" class="popuplink">State 4 (Source Opened/Closed)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_1530542323X, true);" class="popuplink">State 5 (Source UI is opening/closing)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_831869247, true);" class="popuplink">State 6 (Source is starting/ending transferring image)</a></p>
<p><a href="javascript:void(0);" onclick="return hmshowPopup(event, popid_1591487050X, true);" class="popuplink">State 7 (Image data is acquiring from the device)</a></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>For a TWAIN enabled application, the state transitions logic (knowing when to change states, which state that TWAIN is currently in, and how to change states successfully) is the responsibility of the application. &nbsp;One bad move, and the <span style="font-weight: bold; text-decoration: underline;">whole</span> application will fail, if not immediately, then eventually. &nbsp;Many times, a TWAIN failure can render the entire operating environment unstable, causing a shutdown or a reboot of the computer to be necessary!</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">How DTWAIN handles the state transition logic:</span></p>
<p>To ease this burden (and many hours, if not many man-days of programming frustration), <span style="font-weight: bold;">DTWAIN</span> handles all TWAIN state transition logic. &nbsp;Using <span style="font-weight: bold;">DTWAIN</span>, your application does not need to handle the intricacies of knowing when, where and how to change states. &nbsp;This drastically reduces the overhead spent in trying to program the state transition logic and virtually eliminates the possibility that the application will not change to the proper TWAIN state at the correct time.  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>However, DTWAIN does require your application to call the DTWAIN functions in a certain order. &nbsp;This 'function order' can be thought of as a variation of the TWAIN state transition logic. &nbsp;The major difference is that DTWAIN offers greater flexibility and is much easier to use than coding hard to manage state transition code.  </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">For persons familiar with TWAIN programming</span>:</p>
<p>The DTWAIN Function Help describes any TWAIN state transitions that are occurring when a DTWAIN function is called. &nbsp;This information is solely for the programmers who are familiar with TWAIN and would like to know what is happening 'behind the scenes' when calling a DTWAIN function.</p>

</td></tr></table>

</body>
</html>
